#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\options onecolumn
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
H2V --- Design Specification
\end_layout

\begin_layout Author
Reuben D'Netto
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Project Overview
\end_layout

\begin_layout Itemize
what is H2V?
\end_layout

\begin_layout Itemize
what is Haskell, and why use it?
\end_layout

\begin_deeper
\begin_layout Itemize
functional vs imperative; C uses the wrong paradigm.
 Enables data-level parallelism
\end_layout

\begin_layout Itemize
lazy evaluation, and its implications
\end_layout

\begin_layout Itemize
side-effects and parallelism; shared state is a bottle-neck
\end_layout

\begin_deeper
\begin_layout Itemize
include example C code demonstrating side effect
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
what sort of Verilog will be generated
\end_layout

\begin_deeper
\begin_layout Itemize
Nios accelerator
\end_layout

\begin_layout Itemize
recursive functions
\end_layout

\begin_layout Itemize
pipelining
\end_layout

\begin_layout Itemize
DMA - sequential vs random, read vs write
\end_layout

\end_deeper
\begin_layout Itemize
what else we generate
\end_layout

\begin_deeper
\begin_layout Itemize
QSys template
\end_layout

\begin_layout Itemize
C headers
\end_layout

\begin_layout Itemize
visual DFD
\end_layout

\end_deeper
\begin_layout Section
Equipment
\end_layout

\begin_layout Subsection
Development Tools
\end_layout

\begin_layout Standard
GHC, standard desktop, etc.
 in addition to target platform
\end_layout

\begin_layout Subsection
Target Platform
\end_layout

\begin_layout Standard
standard desktop, Quartus 12.0, Nios, Cyclone II/IV, etc.
\end_layout

\begin_layout Standard
compilation time should be reasonable for interactive use.
 i.e.
 on the order of seconds, excluding time waiting on Quartus
\end_layout

\begin_layout Section
Design
\end_layout

\begin_layout Subsection
Compilation Process
\end_layout

\begin_layout Standard
[flow chart / block diagram of compilation process]
\end_layout

\begin_layout Itemize
parsing / AST gen
\end_layout

\begin_layout Itemize
DFD gen
\end_layout

\begin_deeper
\begin_layout Itemize
linking
\end_layout

\begin_layout Itemize
closure rewriting
\end_layout

\begin_layout Itemize
[example DFD from H2V]
\end_layout

\end_deeper
\begin_layout Itemize
Verilog gen
\end_layout

\begin_deeper
\begin_layout Itemize
recursion [block diagram showing how tail recursion will be implemented]
\end_layout

\begin_layout Itemize
loop unrolling [block diagram]
\end_layout

\begin_layout Itemize
pipelining (optional)
\end_layout

\begin_layout Itemize
synchronous functions
\end_layout

\begin_deeper
\begin_layout Itemize
discuss the applications of this interface to DMA
\end_layout

\end_deeper
\end_deeper
\begin_layout Subsection
Design of Generated Verilog
\end_layout

\begin_layout Standard
[need to have a simple block diagram for each of these]
\end_layout

\begin_layout Itemize
function interfaces
\end_layout

\begin_deeper
\begin_layout Itemize
each function will have a 3 bit interface consisting of clock, ready, and
 done signals.
 This will enable synchronous functions to run for more than one clock cycle.
 Combinatorial functions can pass the signals through, ensuring no head
 for that case.
\end_layout

\end_deeper
\begin_layout Itemize
lists
\end_layout

\begin_deeper
\begin_layout Itemize
common storage, interface consists of REQ, ACK, EOF.
 Clock signal is provided separately.
 Interface is used to request the next element, EOF indicates list is empty.
\end_layout

\end_deeper
\begin_layout Itemize
DMA
\end_layout

\begin_deeper
\begin_layout Itemize
avalon memory mapped slave
\end_layout

\begin_layout Itemize
sequential --- exposed as list
\end_layout

\begin_deeper
\begin_layout Itemize
could read data into buffer while computation occurs, block reads which
 request unavailable data
\end_layout

\end_deeper
\begin_layout Itemize
random
\end_layout

\begin_deeper
\begin_layout Itemize
custom monad definition?
\end_layout

\begin_layout Itemize
unsafe methods with side-effects? -- acceptable for read-only random access
\end_layout

\end_deeper
\end_deeper
\begin_layout Section
Current State
\end_layout

\begin_layout Standard
description of what has been done, and what remains
\end_layout

\end_body
\end_document
