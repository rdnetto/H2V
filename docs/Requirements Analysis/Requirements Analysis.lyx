#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\options onecolumn
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
H2V --- Requirements Analysis
\end_layout

\begin_layout Author
Reuben D'Netto
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Subsection
Objective
\end_layout

\begin_layout Standard
The aim of this document is to specify the requirements for the Haskell
 to Verilog compiler project.
\end_layout

\begin_layout Subsection
Context
\end_layout

\begin_layout Standard
The compiler will enable the generation of accelerators for soft processors
 on FPGAs from high-level definitions in a subset of Haskell, a functional
 programming language.
 Accelerator definitions will allow recursive functions, and possibly direct
 memory access (DMA) as well.
 The targeted soft processor architecture will be Nios II.
\end_layout

\begin_layout Subsection
Types of Requirements
\end_layout

\begin_layout Paragraph
Requirements
\end_layout

\begin_layout Standard
Core features of the project, without which it will not be suitable for
 the intended application.
\end_layout

\begin_layout Paragraph
Optional Features 
\end_layout

\begin_layout Standard
Features which may be included if possible, but may be omitted due to time
 constraints of infeasibility.
 This includes optimizations to existing functionality.
\end_layout

\begin_layout Paragraph
Assumptions 
\end_layout

\begin_layout Standard
Assumptions implicit in the requirements.
 Violation of these assumptions may result in the need to re-evaluate the
 project's requirements.
\end_layout

\begin_layout Paragraph
Limitations 
\end_layout

\begin_layout Standard
Negative requirements; features which have been excluded to limit the project's
 scope.
\end_layout

\begin_layout Section
Equipment
\end_layout

\begin_layout Standard
The following equipment will be required.
\end_layout

\begin_layout Subsection
Hardware
\end_layout

\begin_layout Enumerate
Altera DE2 FPGA
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Field Programmable Gate Array
\end_layout

\end_inset

 --- for testing of generated accelerators.
 Available in labs.
\end_layout

\begin_layout Subsection
Software
\end_layout

\begin_layout Enumerate
Glasgow Haskell Compiler --- reference implementation of Haskell.
 Freely available online.
\end_layout

\begin_layout Enumerate
Altera Quartus II 13.0sp1
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
This is the most recent version of Quartus which supports the DE2 series
 of FPGAs.
\end_layout

\end_inset

 --- for synthesis and programming of generated accelerators.
 Available in labs, license provided.
\end_layout

\begin_layout Enumerate
Git --- revision control software.
 Freely available online.
\end_layout

\begin_layout Section
Requirements
\end_layout

\begin_layout Paragraph
Project Overview
\end_layout

\begin_layout Standard
The project has been split into the following phases:
\end_layout

\begin_layout Itemize
Compiler design --- enables the conversion of Haskell into Verilog
\end_layout

\begin_layout Itemize
Qsys integration --- enables the use of resulting Verilog modules as Nios
 peripherals
\end_layout

\begin_layout Itemize
Direct Memory Access --- enables the accelerator to access the processor's
 RAM
\end_layout

\begin_layout Itemize
Benchmarking --- performance comparison of generated accelerators with equivalen
t handwritten C and Verilog
\end_layout

\begin_layout Subsection
Compiler
\end_layout

\begin_layout Subsubsection
Requirements
\end_layout

\begin_layout Enumerate
Must accept input in the form of a single file written in a subset of Haskell,
 and output a Verilog module which performs an equivalent computation.
\end_layout

\begin_deeper
\begin_layout Enumerate
The supported language will be a subset of Haskell 2010.
\begin_inset CommandInset citation
LatexCommand cite
key "key-haskell-def"

\end_inset

 Haskell is a pure functional language, meaning that variables within a
 function are immutable.
 This simplifies conversion to hardware logic.
\end_layout

\begin_layout Enumerate
Input file may contain tail-recursive functions.
\end_layout

\end_deeper
\begin_layout Subsubsection
Optional Features
\end_layout

\begin_layout Enumerate
The language of accepted input files should be a proper subset of Haskell.
 i.e.
 it should be compatible with existing Haskell compilers.
\end_layout

\begin_layout Enumerate
First class functions
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
A first class function is one which can be stored in a variable and passed
 as an argument to a function.
\end_layout

\end_inset

 may be supported.
 (This is a prerequisite for functors and monads.)
\end_layout

\begin_layout Enumerate
Unary non-tail recursive functions may be supported, provided the expression
 mapping the current arguments to the recursive call is a bijective function.
 i.e.
 every possible output of the mapping and its inverse (on their respective
 domains) is unique.
\end_layout

\begin_layout Enumerate
Multiple files may be sourced by the compiler and output as corresponding
 Verilog modules.
\end_layout

\begin_layout Enumerate
Where a function calls itself recursively, more than one recursive call
 may be performed per clock cycle (loop vectorization).
\end_layout

\begin_layout Enumerate
Expression trees may be restructured to reduce the length of the critical
 path, thereby reducing computation time.
\end_layout

\begin_layout Enumerate
Type inference may be partially implemented.
\end_layout

\begin_layout Subsubsection
Assumptions
\end_layout

\begin_layout Enumerate
First class functions are not required to implement the core features.
\end_layout

\begin_layout Subsubsection
Limitations
\end_layout

\begin_layout Enumerate
The Haskell standard library will not be supported.
 A small subset of the Prelude module will be implemented as necessary to
 enable the use cases.
\end_layout

\begin_layout Enumerate
Non-unary recursive functions will not be supported.
\end_layout

\begin_layout Subsection
Qsys Integration
\end_layout

\begin_layout Subsubsection
Requirements
\end_layout

\begin_layout Enumerate
The compiler must generate appropriate C headers such that the module can
 be used as an accelerator for a Nios II processor (implemented as a custom
 instruction).
\end_layout

\begin_layout Enumerate
The compiler must generate an appropriate component definition such that
 the accelerator can be added to the processor using Qsys.
\end_layout

\begin_layout Subsubsection
Optional Features
\end_layout

\begin_layout Enumerate
Optional features in the Avalon bus protocol may be used to reduce overheads
 or improve performance.
\end_layout

\begin_layout Enumerate
Support for Avalon Streaming interfaces
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

 may be implemented.
 (This is a similar but distinct bus protocol to that used for Avalon Memory
 Mapped devices.
 It has applications in signal processing, and may be more compatible with
 Haskell than the DMA approach.)
\end_layout

\begin_layout Subsubsection
Assumptions
\end_layout

\begin_layout Enumerate
The Avalon bus protocol is well documented and can be interfaced with easily.
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset


\end_layout

\begin_layout Subsubsection
Limitations
\end_layout

\begin_layout Enumerate
The accelerator will be subject to the overheads of the Avalon bus, etc.
 which are used by Qsys.
 The overhead may be on order of several clock cycles.
\end_layout

\begin_layout Enumerate
The accelerator will only support memory available as an Avalon Memory Mapped
 Slave interface.
\end_layout

\begin_layout Subsection
Direct Memory Access
\end_layout

\begin_layout Subsubsection
Requirements
\end_layout

\begin_layout Enumerate
The accelerator must be capable of reading data from sequential addresses
 in RAM.
 
\end_layout

\begin_layout Subsubsection
Optional Features
\end_layout

\begin_layout Enumerate
The accelerator may be capable of writing data to sequential addresses in
 RAM.
\end_layout

\begin_layout Enumerate
The accelerator may be capable of reading non-sequential data stored in
 RAM.
\end_layout

\begin_layout Enumerate
The accelerator may be capable of writing data to non-sequential addresses
 in RAM.
\end_layout

\begin_layout Enumerate
The accelerator may cache subsequent accesses to improve performance.
\end_layout

\begin_layout Subsubsection
Assumptions
\end_layout

\begin_layout Enumerate
All memory accesses (both reads and writes) will take one clock cycle.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
I have no idea whether we'll be using DRAM or SRAM --- big difference in
 terms of access time and complexity.
 Maybe dedicated memory for the accelerator is a possibility?
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Limitations
\end_layout

\begin_layout Enumerate
All memory access will take place through the Avalon bus, which will add
 overheads.
\end_layout

\begin_layout Subsection
Performance
\end_layout

\begin_layout Subsubsection
Requirements
\end_layout

\begin_layout Enumerate
Benchmarks will be used to compare the execution time of the accelerator
 to handwritten C and Verilog.
\end_layout

\begin_deeper
\begin_layout Enumerate
The benchmarks used should be taken from 
\emph on
s
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Use-Cases"

\end_inset

 Use Cases
\emph default
.
\end_layout

\begin_layout Enumerate
This requirement should not be construed as implying the implementation
 of all use cases detailed in s
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Use-Cases"

\end_inset

 --- where a use case depends on optional features, it will be regarded
 as one.
\end_layout

\end_deeper
\begin_layout Enumerate
The execution time of the accelerator should be within an order of magnitude
 of handwritten C, or better.
\end_layout

\begin_layout Subsubsection
Optional Features
\end_layout

\begin_layout Enumerate
Handwritten Verilog examples may also be included in the comparison.
\end_layout

\begin_layout Subsubsection
Assumptions
\end_layout

\begin_layout Enumerate
Memory access will be the bottleneck for most accelerators.
\end_layout

\begin_layout Enumerate
The processor's RAM will be support multiple reads/writes within a single
 clock cycle.
\end_layout

\begin_layout Subsubsection
Limitations
\end_layout

\begin_layout Enumerate
The soft processor may be the upper bound on clock frequency.
\end_layout

\begin_layout Subsection
Legal
\end_layout

\begin_layout Enumerate
The project should be published under a 
\emph on
free software license
\emph default
, as defined by the Free Software Foundation.
\begin_inset CommandInset citation
LatexCommand cite
key "key-2"

\end_inset

, 
\begin_inset CommandInset citation
LatexCommand cite
key "key-3"

\end_inset

.
\end_layout

\begin_layout Section
Use Cases
\begin_inset CommandInset label
LatexCommand label
name "sec:Use-Cases"

\end_inset


\end_layout

\begin_layout Enumerate
Generation of the Fibonacci sequence.
 Note that while this is of little practical value, it is a useful demonstration
 of basic flow control and tail recursive functions.
\end_layout

\begin_layout Enumerate
Summing a list of numbers.
 This will demonstrate sequential reads via DMA.
\end_layout

\begin_layout Enumerate
Vector dot products.
 This will demonstrate (possibly concurrent) sequential reads and writes
 via DMA.
\end_layout

\begin_layout Enumerate
Signal filtering.
 This will demonstrate one-dimensional convolution.
\end_layout

\begin_layout Enumerate
Image filtering.
 This will demonstrate two-dimensional convolution.
\end_layout

\begin_layout Enumerate
Matrix multiplication.
 This will demonstrate non-sequential reads and writes via DMA, as well
 as being of practical value.
\end_layout

\begin_layout Enumerate
Iterative eigendecomposition.
 This example is primarily of practical value.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Consider doing a Fourier transform as well --- need to figure out how to
 implement FFT without binary recursion.
 A stream based approach would be ideal...
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-haskell-def"

\end_inset

Simon Marlow (2010, Apr).
 
\emph on
Haskell 2010 Language Report
\emph default
 [Online].
 Available: http://www.haskell.org/onlinereport/haskell2010/
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-1"

\end_inset

Grey Innovation (2006, Mar.).
 
\emph on
Requirements Specification
\emph default
.
 [Online].
 Available: http://moodle.vle.monash.edu/mod/resource/view.php?id=1461367
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-2"

\end_inset

Free Software Foundation (2013).
 
\emph on
What is free software?
\emph default
 [Online].
 Available: http://www.gnu.org/philosophy/free-sw.html
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-3"

\end_inset

Free Software Foundation Inc.
 (2012).
 
\emph on
Various Licenses and Comments About Them.

\emph default
 [Online].
 Available: http://www.gnu.org/licenses/license-list.html
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-1"

\end_inset

Altera (2013, May).
 
\emph on
Avalon Interface Specifications
\emph default
 [Online].
 Available: http://www.altera.com/literature/manual/mnl_avalon_spec.pdf
\end_layout

\end_body
\end_document
